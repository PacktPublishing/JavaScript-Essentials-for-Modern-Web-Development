"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xrange = xrange;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function xrange(stream, start, end) {
  if (!stream || !start || !end) {
    throw new Error("ERR wrong number of arguments for 'xrange' command");
  }

  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  var COUNT = args[0],
      count = args[1];

  if (COUNT && !count) {
    throw new Error('ERR syntax error');
  }

  if (!this.data.has(stream)) {
    return [];
  }

  var list = this.data.get(stream);
  var min = start === '-' ? -Infinity : start;
  var max = end === '+' ? Infinity : end;
  var result = list.filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        eventId = _ref2[0];

    return min <= parseInt(eventId, 10) && max >= parseInt(eventId, 10);
  });
  if (count) return result.slice(0, count);
  return result;
}